{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "MLSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7fc32c8f-f52f-4251-b4f5-ef40c848d336"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8c95e5bc-6519-484b-a2e5-c1efd1fdd75f/resourceGroups/myadf/providers/Microsoft.Synapse/workspaces/myadfasas/bigDataPools/MLSparkPool",
				"name": "MLSparkPool",
				"type": "Spark",
				"endpoint": "https://myadfasas.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/MLSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import sklearn_pandas as skp\r\n",
					"import sklearn\r\n",
					"from sklearn import linear_model\r\n",
					"from sklearn.metrics import mean_absolute_error\r\n",
					"from sklearn.preprocessing import OneHotEncoder\r\n",
					"from sklearn.preprocessing import OrdinalEncoder\r\n",
					"from sklearn.preprocessing import LabelEncoder\r\n",
					"from sklearn.model_selection import cross_val_score\r\n",
					"from sklearn.model_selection import RepeatedKFold\r\n",
					"from sklearn.ensemble import RandomForestRegressor\r\n",
					"from sklearn.ensemble import ExtraTreesRegressor\r\n",
					"from sklearn.ensemble import HistGradientBoostingRegressor\r\n",
					"from sklearn.ensemble import GradientBoostingRegressor\r\n",
					"from window_ops.rolling import rolling_mean, rolling_max, rolling_min\r\n",
					"from mlforecast import MLForecast\r\n",
					"from mlforecast.utils import generate_daily_series\r\n",
					"from sklearn.impute import SimpleImputer\r\n",
					"from sklearn.pipeline import make_pipeline\r\n",
					"from xgboost import XGBRegressor\r\n",
					"from sklearn.linear_model import LinearRegression\r\n",
					"from sklearn.preprocessing import MinMaxScaler\r\n",
					"from sklearn.metrics import accuracy_score\r\n",
					"from sklearn.neural_network import MLPRegressor\r\n",
					"from sklearn.metrics import mean_squared_error\r\n",
					"# The servername is in the format \"jdbc:sqlserver://<AzureSQLServerName>.database.windows.net:1433\"\r\n",
					"servername = \"jdbc:sqlserver://myadfasas.sql.azuresynapse.net:1433\"\r\n",
					"dbname = \"dedicatedsqlpool1\"\r\n",
					"url = servername + \";\" + \"databaseName=\" + dbname + \";\"\r\n",
					"dbtable = \"dbo.pecan_submit\"\r\n",
					"user = \"sqladminuser\"\r\n",
					"password=\"Stegopuss3$\"\r\n",
					"\r\n",
					"print(\"read data from SQL server table  \")\r\n",
					"pecanDF = spark.read \\\r\n",
					"        .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"        .option(\"url\", url) \\\r\n",
					"        .option(\"dbtable\", dbtable) \\\r\n",
					"        .option(\"user\", user) \\\r\n",
					"        .option(\"password\", password).load()\r\n",
					"\r\n",
					"pecanDF.show(5)\r\n",
					"\r\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}